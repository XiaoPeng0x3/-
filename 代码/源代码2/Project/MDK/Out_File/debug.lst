C251 COMPILER V5.60.0,  debug                                                              14/06/24  16:35:51  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE debug
OBJECT MODULE PLACED IN .\Out_File\debug.obj
COMPILER INVOKED BY: D:\Keil_v5\C251\BIN\C251.EXE ..\CODE\debug.c XSMALL INTR2 WARNINGLEVEL(0) BROWSE INCDIR(..\..\Libra
                    -ries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE;..\USER\inc;..\USER\src) D
                    -EBUG PRINT(.\Out_File\debug.lst) TABS(2) OBJECT(.\Out_File\debug.obj) 

stmt  level    source

    1          #include "debug.h"
    2          #include "math.h"
    3          int16 date_l = 0;
    4          int16 date_r = 0;
    5          float gyro_x, gyro_y, gyro_z; //陀螺仪角速度变量
    6          float acc_x, acc_y, acc_z;    //加速度计变量
    7          int16 limit_max = 200;
    8          int16 limit_min = -200;
    9          /*--------------------------------
   10           * @brief  gyro_data_get
   11           * @param  void
   12           * @return void
   13           * @author Against_War
   14           * @date 202./04/03
   15           * @note 获取陀螺仪数据并滤波
   16           *--------------------------------*/
   17          void gyro_data_get()
   18          {
   19   1          static float gyro_x_last = 0.0;
   20   1          static float gyro_y_last = 0.0;
   21   1          static float gyro_z_last = 0.0;
   22   1          float acc_angle_x, acc_angle_y, acc_angle_z;
   23   1          get_icm20602_accdata_simiic();
   24   1          get_icm20602_gyro_simiic();
   25   1          gyro_x = icm_gyro_x / 16.4; //转换为度/秒 详情参阅SEEKFREE_ICM20602.c\get_icm20602_gyro_simi
             -ic()下的注释
   26   1          gyro_y = icm_gyro_y / 16.4;
   27   1          gyro_z = icm_gyro_z / 16.4;
   28   1          acc_x = icm_acc_x / 4096; //转换为g(m/s2)
   29   1          acc_y = icm_acc_y / 4096;
   30   1          acc_z = icm_acc_z / 4096;
   31   1          gyro_x = gyro_x_last * 0.1 + gyro_x * 0.9;
   32   1          gyro_y = gyro_y_last * 0.1 + gyro_y * 0.9;
   33   1          gyro_z = gyro_z_last * 0.1 + gyro_z * 0.9;
   34   1          if (gyro_z > limit_max)
   35   1          {
   36   2              gyro_z = limit_max;
   37   2          }
   38   1          else if (gyro_z < limit_min)
   39   1          {
   40   2              gyro_z = limit_min;
   41   2          }
   42   1          if (gyro_y > limit_max)
   43   1          {
   44   2              gyro_y = limit_max;
   45   2          }
   46   1          else if (gyro_y < limit_min)
   47   1          {
   48   2              gyro_y = limit_min;
   49   2          }
   50   1          gyro_x_last = gyro_x;
   51   1          gyro_z_last = gyro_z;
   52   1          gyro_y_last = gyro_y;
   53   1          // First_order_Filter(acc_y,gyro_y,0.02);
   54   1      }
   55          /*----------------------------------------------------------------------------
   56              @brief gyro_zero_process()
C251 COMPILER V5.60.0,  debug                                                              14/06/24  16:35:51  PAGE 2   

   57              @param  void
   58              @return void
   59              @author Against_War
   60              @date   2022/04/03
   61              @note   ICM20602陀螺仪零漂处理
   62              @Sample usage: gyro_zero_process();
   63          ---------------------------------------------------------------------------*/
   64          void gyro_zero_process()
   65          {
   66   1          // get_icm20602_accdata_simiic();
   67   1          uint8 zero_flag = 1;
   68   1          int32 z_zero;
   69   1          int32 y_zero;
   70   1          uint8 i = 0;
   71   1          vuint8 z_zero_Low = 0, z_zero_High = 0, z_zero_finish = 0, y_zero_Low = 0, y_zero_High = 0, y_zero_fi
             -nish = 0;
   72   1          icm20602_init_simspi();     //陀螺仪初始化
   73   1          get_icm20602_gyro_simspi(); //获取陀螺仪数据
   74   1          if (zero_flag)
   75   1          {
   76   2              if (i < 200)
   77   2              {
   78   3                  z_zero += icm_gyro_z;
   79   3                  y_zero += icm_gyro_y;
   80   3                  i++;
   81   3              }
   82   2              else
   83   2              {
   84   3                  //这里非常奇怪，只有累加的值除次数的1/2陀螺仪读取值才正常
   85   3                  z_zero_finish = -(int16)(z_zero / 100);
   86   3                  z_zero_Low = (uint8)z_zero_finish;
   87   3                  z_zero_High = (uint8)(z_zero_finish >> 8);
   88   3                  icm_simspi_w_reg_byte(ICM20602_ZG_OFFS_USRL, z_zero_High);
   89   3                  icm_simspi_w_reg_byte(ICM20602_ZG_OFFS_USRH, z_zero_Low);
   90   3                  y_zero_finish = -(int16)(y_zero / 100);
   91   3                  y_zero_Low = (uint8)y_zero_finish;
   92   3                  y_zero_High = (uint8)(y_zero_finish >> 8);
   93   3                  icm_simspi_w_reg_byte(ICM20602_ZG_OFFS_USRL, y_zero_High);
   94   3                  icm_simspi_w_reg_byte(ICM20602_ZG_OFFS_USRH, y_zero_Low);
   95   3                  zero_flag = 0; //陀螺仪零漂处理标志位清零
   96   3              }
   97   2          }
   98   1          else
   99   1          {
  100   2          }
  101   1      }
  102          /*----------------------------------------------------------------
  103           * @brief 编码器数据采集
  104           * @return void
  105           * @author ***
  106           * @date 2022/03/08
  107           * @return  返回采集的值
  108           * @samples DATE_L_get（）采集左数值   DATE_R_get（） 采集右数值
  109           *----------------------------------------------------------------*/
  110          int16 DATE_L_get()
  111          {
  112   1          ENCODE_DIR_L = DIR_L;
  113   1          if (ENCODE_DIR_L == 0)
  114   1          {
  115   2              date_l = -1 * ctimer_count_read(ENCODE_L);
  116   2          }
  117   1          else
  118   1          {
  119   2              date_l = ctimer_count_read(ENCODE_L);
  120   2          }
  121   1          ctimer_count_clean(ENCODE_L); //清除编码器计数器计数
C251 COMPILER V5.60.0,  debug                                                              14/06/24  16:35:51  PAGE 3   

  122   1          return date_l;
  123   1      }
  124          int16 DATE_R_get()
  125          {
  126   1          ENCODE_DIR_R = DIR_R;
  127   1          if (ENCODE_DIR_R == 0)
  128   1          {
  129   2              date_r = ctimer_count_read(ENCODE_R);
  130   2          }
  131   1          else
  132   1          {
  133   2              date_r = -1 * ctimer_count_read(ENCODE_R);
  134   2          }
  135   1          ctimer_count_clean(ENCODE_R); //清除编码器计数器计数
  136   1          return date_r;
  137   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       503     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        44         10
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        48     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
